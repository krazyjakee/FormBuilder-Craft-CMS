// Generated by CoffeeScript 1.9.0
(function() {
  var $validationSettingsElem, init, onFieldSettingsMenuItemClick, validationFormBody, validationFormModal, validationSettings;

  $validationSettingsElem = $('#validationSettings');

  validationSettings = ($validationSettingsElem.val() ? JSON.parse($validationSettingsElem.val()) : []);

  validationFormBody = "<div class='formBuilderUI'>\n  <div class='field'>\n    <div class='heading'>\n      <label>Validation Type</label>\n    </div>\n    <div class='input'>\n      <div class='select'>\n        <select>\n          <option value=''>None</option>\n          <option value='email'>Email</option>\n          <option value='alphanum'>AlphaNumeric</option>\n          <option value='alpha'>Alpha</option>\n          <option value='number'>Numeric</option>\n          <option value='url'>Url</option>\n          <option value='date'>Date</option>\n          <option value='color'>Color</option>\n        </select>\n      </div>\n    </div>\n  </div>\n</div>";

  validationFormModal = '<div class="modal elementselectormodal formbuilderModal"><div class="body" /><div class="footer"><div class="buttons rightalign first"><div class="btn close submit">Done</div></div></div></div>';

  onFieldSettingsMenuItemClick = function(e) {
    var $modal, $trigger, modal;
    e.preventDefault();
    e.stopPropagation();
    $trigger = $(e.target);
    $modal = $trigger.data('_formBuilderModal');
    if (!$modal) {
      $modal = $(validationFormModal);
      modal = new Garnish.Modal($modal, {
        resizable: true,
        autoShow: false,
        onShow: function() {
          var $field, fieldId, select, setting, _i, _len, _results;
          $field = $trigger.data('_formBuilderField');
          fieldId = $field.data('id');
          select = $modal.find('select');
          select.data('field', $field);
          _results = [];
          for (_i = 0, _len = validationSettings.length; _i < _len; _i++) {
            setting = validationSettings[_i];
            if (setting.fieldId === fieldId) {
              _results.push(select.val(setting.value));
            }
          }
          return _results;
        },
        onHide: function() {
          var exists, fieldId, index, select, setting, value, _i, _len;
          select = $modal.find('select');
          fieldId = select.data('field').data('id');
          value = select.val();
          exists = false;
          for (index = _i = 0, _len = validationSettings.length; _i < _len; index = ++_i) {
            setting = validationSettings[index];
            if (setting.fieldId === fieldId) {
              exists = true;
              validationSettings[index].value = value;
            }
          }
          if (!exists) {
            validationSettings.push({
              fieldId: fieldId,
              value: value
            });
          }
          return $validationSettingsElem.val(JSON.stringify(validationSettings));
        }
      });
      $modal.find('.body').append(validationFormBody);
      $modal.on('click', '.close', function(e) {
        return modal.hide();
      });
      $trigger.data('_formBuilderModal', modal);
    }
    return $trigger.data('_formBuilderModal').show();
  };

  init = function() {
    var $container, $fields;
    $container = $('#fieldlayoutform');
    $fields = $container.find('.fld-field');
    return $fields.find('.settings').click(function() {
      var $field, $menu, elem;
      elem = $(this);
      if (!elem.hasClass("has-validation")) {
        $field = elem.closest('.fld-field');
        $menu = $('.menu:visible');
        $menu.find('ul').children(':first').clone(true).prependTo($menu.find('ul:first')).find('a:first').data('_formBuilderField', $field).attr('data-action', 'toggle-validation').text(Craft.t('Manage Validation')).on('click', onFieldSettingsMenuItemClick);
        return elem.addClass("has-validation");
      }
    });
  };

  init();

}).call(this);

//# sourceMappingURL=formbuilder.js.map
